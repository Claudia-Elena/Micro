
Intr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000536  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00000536  000005ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008000a0  008000a0  0000060a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000060a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000063c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000eda  00000000  00000000  000006f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000898  00000000  00000000  000015ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e2  00000000  00000000  00001e62  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000012c  00000000  00000000  00002544  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000042f  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000638  00000000  00000000  00002a9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  000030d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e3       	ldi	r30, 0x36	; 54
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 ea       	ldi	r26, 0xA0	; 160
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3a       	cpi	r26, 0xA4	; 164
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <main>
  8a:	0c 94 99 02 	jmp	0x532	; 0x532 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <wr_LCDreg>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	96 2f       	mov	r25, r22
  94:	92 95       	swap	r25
  96:	9f 70       	andi	r25, 0x0F	; 15
  98:	92 bb       	out	0x12, r25	; 18
  9a:	81 11       	cpse	r24, r1
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <wr_LCDreg+0x14>
  9e:	82 b3       	in	r24, 0x12	; 18
  a0:	8f 7e       	andi	r24, 0xEF	; 239
  a2:	82 bb       	out	0x12, r24	; 18
  a4:	03 c0       	rjmp	.+6      	; 0xac <wr_LCDreg+0x1a>
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	80 61       	ori	r24, 0x10	; 16
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  b0:	8f 5f       	subi	r24, 0xFF	; 255
  b2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  b6:	82 b3       	in	r24, 0x12	; 18
  b8:	80 62       	ori	r24, 0x20	; 32
  ba:	82 bb       	out	0x12, r24	; 18
  bc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  c0:	8f 5f       	subi	r24, 0xFF	; 255
  c2:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  c6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  ca:	8f 5f       	subi	r24, 0xFF	; 255
  cc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  d0:	82 b3       	in	r24, 0x12	; 18
  d2:	8f 7d       	andi	r24, 0xDF	; 223
  d4:	82 bb       	out	0x12, r24	; 18
  d6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
  da:	8f 5f       	subi	r24, 0xFF	; 255
  dc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
  e0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  e4:	88 23       	and	r24, r24
  e6:	19 f0       	breq	.+6      	; 0xee <wr_LCDreg+0x5c>
  e8:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
  ec:	08 95       	ret
  ee:	82 b3       	in	r24, 0x12	; 18
  f0:	80 7f       	andi	r24, 0xF0	; 240
  f2:	82 bb       	out	0x12, r24	; 18
  f4:	82 b3       	in	r24, 0x12	; 18
  f6:	6f 70       	andi	r22, 0x0F	; 15
  f8:	68 2b       	or	r22, r24
  fa:	62 bb       	out	0x12, r22	; 18
  fc:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 100:	8f 5f       	subi	r24, 0xFF	; 255
 102:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
 106:	82 b3       	in	r24, 0x12	; 18
 108:	80 62       	ori	r24, 0x20	; 32
 10a:	82 bb       	out	0x12, r24	; 18
 10c:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 110:	8f 5f       	subi	r24, 0xFF	; 255
 112:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
 116:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 11a:	8f 5f       	subi	r24, 0xFF	; 255
 11c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
 120:	82 b3       	in	r24, 0x12	; 18
 122:	8f 7d       	andi	r24, 0xDF	; 223
 124:	82 bb       	out	0x12, r24	; 18
 126:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__data_end>
 12a:	8f 5f       	subi	r24, 0xFF	; 255
 12c:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
 130:	08 95       	ret

00000132 <initLCD>:
 132:	12 ba       	out	0x12, r1	; 18
 134:	8f ef       	ldi	r24, 0xFF	; 255
 136:	81 bb       	out	0x11, r24	; 17
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	89 e6       	ldi	r24, 0x69	; 105
 13c:	98 e1       	ldi	r25, 0x18	; 24
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <initLCD+0xc>
 146:	00 c0       	rjmp	.+0      	; 0x148 <initLCD+0x16>
 148:	00 00       	nop
 14a:	6c e2       	ldi	r22, 0x2C	; 44
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 152:	25 e8       	ldi	r18, 0x85	; 133
 154:	2a 95       	dec	r18
 156:	f1 f7       	brne	.-4      	; 0x154 <initLCD+0x22>
 158:	00 00       	nop
 15a:	6c e2       	ldi	r22, 0x2C	; 44
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 162:	85 e8       	ldi	r24, 0x85	; 133
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <initLCD+0x32>
 168:	00 00       	nop
 16a:	6e e0       	ldi	r22, 0x0E	; 14
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 172:	95 e8       	ldi	r25, 0x85	; 133
 174:	9a 95       	dec	r25
 176:	f1 f7       	brne	.-4      	; 0x174 <initLCD+0x42>
 178:	00 00       	nop
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 182:	25 e8       	ldi	r18, 0x85	; 133
 184:	2a 95       	dec	r18
 186:	f1 f7       	brne	.-4      	; 0x184 <initLCD+0x52>
 188:	00 00       	nop
 18a:	61 e0       	ldi	r22, 0x01	; 1
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 192:	8f e6       	ldi	r24, 0x6F	; 111
 194:	97 e1       	ldi	r25, 0x17	; 23
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <initLCD+0x64>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <initLCD+0x6a>
 19c:	00 00       	nop
 19e:	08 95       	ret

000001a0 <gotoLC>:
	wr_LCDreg(IReg, 0x01);
    _delay_ms(2);
}

void gotoLC(unsigned char line, unsigned char col){
   if(line>=1 && line<=2 && col>=1 && col <= 16){
 1a0:	81 50       	subi	r24, 0x01	; 1
 1a2:	82 30       	cpi	r24, 0x02	; 2
 1a4:	90 f4       	brcc	.+36     	; 0x1ca <gotoLC+0x2a>
 1a6:	66 23       	and	r22, r22
 1a8:	81 f0       	breq	.+32     	; 0x1ca <gotoLC+0x2a>
 1aa:	61 31       	cpi	r22, 0x11	; 17
 1ac:	70 f4       	brcc	.+28     	; 0x1ca <gotoLC+0x2a>
      wr_LCDreg(IReg, 0x80 + 0x40 * --line + --col); //set DDRAM address
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 96       	adiw	r24, 0x02	; 2
 1b2:	61 50       	subi	r22, 0x01	; 1
 1b4:	20 e4       	ldi	r18, 0x40	; 64
 1b6:	82 9f       	mul	r24, r18
 1b8:	60 0d       	add	r22, r0
 1ba:	11 24       	eor	r1, r1
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c2:	85 e8       	ldi	r24, 0x85	; 133
 1c4:	8a 95       	dec	r24
 1c6:	f1 f7       	brne	.-4      	; 0x1c4 <gotoLC+0x24>
 1c8:	00 00       	nop
 1ca:	08 95       	ret

000001cc <putchLCD>:
      _delay_us(50);
   }
}

void putchLCD(char ch){
	wr_LCDreg(DReg,ch);
 1cc:	68 2f       	mov	r22, r24
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	0e 94 49 00 	call	0x92	; 0x92 <wr_LCDreg>
 1d4:	85 e8       	ldi	r24, 0x85	; 133
 1d6:	8a 95       	dec	r24
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <putchLCD+0xa>
 1da:	00 00       	nop
 1dc:	08 95       	ret

000001de <putsLCD>:
   _delay_us(50);
}

void putsLCD( char ch[]){
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	ec 01       	movw	r28, r24
	while(*ch)
 1e4:	03 c0       	rjmp	.+6      	; 0x1ec <putsLCD+0xe>
		putchLCD(*ch++);
 1e6:	21 96       	adiw	r28, 0x01	; 1
 1e8:	0e 94 e6 00 	call	0x1cc	; 0x1cc <putchLCD>
	wr_LCDreg(DReg,ch);
   _delay_us(50);
}

void putsLCD( char ch[]){
	while(*ch)
 1ec:	88 81       	ld	r24, Y
 1ee:	81 11       	cpse	r24, r1
 1f0:	fa cf       	rjmp	.-12     	; 0x1e6 <putsLCD+0x8>
		putchLCD(*ch++);
}
 1f2:	df 91       	pop	r29
 1f4:	cf 91       	pop	r28
 1f6:	08 95       	ret

000001f8 <main>:
volatile unsigned char kbhit = 0;
volatile char kbcode = NOKEY;

int main(){
   
   initLCD();
 1f8:	0e 94 99 00 	call	0x132	; 0x132 <initLCD>
   //initializari pentru timer0 - fast PWM
   //       ---------- fast PWM
   //       |  |
   TCCR0=0b01101100;
 1fc:	8c e6       	ldi	r24, 0x6C	; 108
 1fe:	83 bf       	out	0x33, r24	; 51
   //        || |||
   //        ||  -----p=256
   //        --------- OC0 at Bottom, non-inverting mode
   OCR0=0;
 200:	1c be       	out	0x3c, r1	; 60
   //seteaza OC0 ca iesire
   setbit(DDRB,3);
 202:	87 b3       	in	r24, 0x17	; 23
 204:	88 60       	ori	r24, 0x08	; 8
 206:	87 bb       	out	0x17, r24	; 23
   gotoLC(1, 1);
 208:	61 e0       	ldi	r22, 0x01	; 1
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gotoLC>
   putsLCD("Astept          ");
 210:	85 e6       	ldi	r24, 0x65	; 101
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
   
   setbit(TIMSK,TOIE0);//demascarea cererii de intrerupere TOIE0
 218:	89 b7       	in	r24, 0x39	; 57
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	89 bf       	out	0x39, r24	; 57
   setbit(SREG, IFLAG);//demascarea intreruperii procesorului
 21e:	8f b7       	in	r24, 0x3f	; 63
 220:	80 68       	ori	r24, 0x80	; 128
 222:	8f bf       	out	0x3f, r24	; 63
     
   while(1){
      //simulare calcul de durata
      if( kbhit && kbcode>='0' && kbcode<='9'){
 224:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <kbhit>
 228:	88 23       	and	r24, r24
 22a:	e1 f3       	breq	.-8      	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 22c:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <kbcode>
 230:	80 33       	cpi	r24, 0x30	; 48
 232:	c0 f3       	brcs	.-16     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
 234:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <kbcode>
 238:	8a 33       	cpi	r24, 0x3A	; 58
 23a:	a0 f7       	brcc	.-24     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>
         kbhit=0;
 23c:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <kbhit>
         //scrie "Calculez..." de la pozitia 1, 1
         gotoLC(1,1);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gotoLC>
         putsLCD("Calculez        ");
 248:	86 e7       	ldi	r24, 0x76	; 118
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 250:	2f ef       	ldi	r18, 0xFF	; 255
 252:	81 e1       	ldi	r24, 0x11	; 17
 254:	9a e7       	ldi	r25, 0x7A	; 122
 256:	21 50       	subi	r18, 0x01	; 1
 258:	80 40       	sbci	r24, 0x00	; 0
 25a:	90 40       	sbci	r25, 0x00	; 0
 25c:	e1 f7       	brne	.-8      	; 0x256 <__EEPROM_REGION_LENGTH__+0x56>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <__EEPROM_REGION_LENGTH__+0x60>
 260:	00 00       	nop
         _delay_ms(5000);
         //scrie "Astept..." de la pozitia 1, 1
         gotoLC(1,1);
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gotoLC>
         putsLCD("Astept          ");
 26a:	85 e6       	ldi	r24, 0x65	; 101
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
 272:	d8 cf       	rjmp	.-80     	; 0x224 <__EEPROM_REGION_LENGTH__+0x24>

00000274 <kbscan>:
      putsLCD("%  " );
   }
   loop_cnt++;
}//end ISR

char kbscan(){
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	cd b7       	in	r28, 0x3d	; 61
 27a:	de b7       	in	r29, 0x3e	; 62
 27c:	63 97       	sbiw	r28, 0x13	; 19
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	f8 94       	cli
 282:	de bf       	out	0x3e, r29	; 62
 284:	0f be       	out	0x3f, r0	; 63
 286:	cd bf       	out	0x3d, r28	; 61
   char tabela_trans[]="123A456B789C*0#D";
 288:	81 e1       	ldi	r24, 0x11	; 17
 28a:	e7 e8       	ldi	r30, 0x87	; 135
 28c:	f0 e0       	ldi	r31, 0x00	; 0
 28e:	de 01       	movw	r26, r28
 290:	11 96       	adiw	r26, 0x01	; 1
 292:	01 90       	ld	r0, Z+
 294:	0d 92       	st	X+, r0
 296:	8a 95       	dec	r24
 298:	e1 f7       	brne	.-8      	; 0x292 <kbscan+0x1e>
   unsigned char temp;
   volatile unsigned char La; //linia activa
   volatile unsigned char Ca; //coloana activa
   unsigned char cod_intern;
   char cod_extern;
   for(DDRA=0x10;DDRA>0;DDRA<<=1) {
 29a:	80 e1       	ldi	r24, 0x10	; 16
 29c:	8a bb       	out	0x1a, r24	; 26
   loop_cnt++;
}//end ISR

char kbscan(){
   char tabela_trans[]="123A456B789C*0#D";
   unsigned char cols=0;
 29e:	80 e0       	ldi	r24, 0x00	; 0
   unsigned char temp;
   volatile unsigned char La; //linia activa
   volatile unsigned char Ca; //coloana activa
   unsigned char cod_intern;
   char cod_extern;
   for(DDRA=0x10;DDRA>0;DDRA<<=1) {
 2a0:	0b c0       	rjmp	.+22     	; 0x2b8 <kbscan+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2a2:	8a e0       	ldi	r24, 0x0A	; 10
 2a4:	8a 95       	dec	r24
 2a6:	f1 f7       	brne	.-4      	; 0x2a4 <kbscan+0x30>
 2a8:	00 c0       	rjmp	.+0      	; 0x2aa <kbscan+0x36>
      _delay_us(4);
      cols=~PINA;
 2aa:	89 b3       	in	r24, 0x19	; 25
 2ac:	80 95       	com	r24
      cols=cols&0x0f;
 2ae:	8f 70       	andi	r24, 0x0F	; 15
      if(cols!=0)
 2b0:	31 f4       	brne	.+12     	; 0x2be <kbscan+0x4a>
   unsigned char temp;
   volatile unsigned char La; //linia activa
   volatile unsigned char Ca; //coloana activa
   unsigned char cod_intern;
   char cod_extern;
   for(DDRA=0x10;DDRA>0;DDRA<<=1) {
 2b2:	9a b3       	in	r25, 0x1a	; 26
 2b4:	99 0f       	add	r25, r25
 2b6:	9a bb       	out	0x1a, r25	; 26
 2b8:	9a b3       	in	r25, 0x1a	; 26
 2ba:	91 11       	cpse	r25, r1
 2bc:	f2 cf       	rjmp	.-28     	; 0x2a2 <kbscan+0x2e>
      cols=~PINA;
      cols=cols&0x0f;
      if(cols!=0)
      break;
   }
   if(DDRA==0)
 2be:	9a b3       	in	r25, 0x1a	; 26
 2c0:	99 23       	and	r25, r25
 2c2:	f1 f0       	breq	.+60     	; 0x300 <kbscan+0x8c>
   return NOKEY;

   temp=DDRA;
 2c4:	2a b3       	in	r18, 0x1a	; 26
   for(La=0;temp!=0x10;temp>>=1)
 2c6:	1a 8a       	std	Y+18, r1	; 0x12
 2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <kbscan+0x5e>
   La++;
 2ca:	9a 89       	ldd	r25, Y+18	; 0x12
 2cc:	9f 5f       	subi	r25, 0xFF	; 255
 2ce:	9a 8b       	std	Y+18, r25	; 0x12
   }
   if(DDRA==0)
   return NOKEY;

   temp=DDRA;
   for(La=0;temp!=0x10;temp>>=1)
 2d0:	26 95       	lsr	r18
 2d2:	20 31       	cpi	r18, 0x10	; 16
 2d4:	d1 f7       	brne	.-12     	; 0x2ca <kbscan+0x56>
   La++;

   for(Ca=0;cols!=1;cols>>=1)
 2d6:	1b 8a       	std	Y+19, r1	; 0x13
 2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <kbscan+0x6e>
   Ca++;
 2da:	9b 89       	ldd	r25, Y+19	; 0x13
 2dc:	9f 5f       	subi	r25, 0xFF	; 255
 2de:	9b 8b       	std	Y+19, r25	; 0x13

   temp=DDRA;
   for(La=0;temp!=0x10;temp>>=1)
   La++;

   for(Ca=0;cols!=1;cols>>=1)
 2e0:	86 95       	lsr	r24
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	d1 f7       	brne	.-12     	; 0x2da <kbscan+0x66>
   Ca++;

   cod_intern=La*4+Ca;
 2e6:	8a 89       	ldd	r24, Y+18	; 0x12
 2e8:	9b 89       	ldd	r25, Y+19	; 0x13
 2ea:	88 0f       	add	r24, r24
 2ec:	88 0f       	add	r24, r24
 2ee:	89 0f       	add	r24, r25
   cod_extern=tabela_trans[cod_intern];
 2f0:	e1 e0       	ldi	r30, 0x01	; 1
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	ec 0f       	add	r30, r28
 2f6:	fd 1f       	adc	r31, r29
 2f8:	e8 0f       	add	r30, r24
 2fa:	f1 1d       	adc	r31, r1
 2fc:	80 81       	ld	r24, Z
   return cod_extern;
 2fe:	01 c0       	rjmp	.+2      	; 0x302 <kbscan+0x8e>
      cols=cols&0x0f;
      if(cols!=0)
      break;
   }
   if(DDRA==0)
   return NOKEY;
 300:	8f e7       	ldi	r24, 0x7F	; 127
   Ca++;

   cod_intern=La*4+Ca;
   cod_extern=tabela_trans[cod_intern];
   return cod_extern;
 302:	63 96       	adiw	r28, 0x13	; 19
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <__vector_9>:
      }
      // end calcul
   }//end while
}//end main

ISR(TIMER0_OVF_vect){
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	0f 92       	push	r0
 31c:	11 24       	eor	r1, r1
 31e:	2f 93       	push	r18
 320:	3f 93       	push	r19
 322:	4f 93       	push	r20
 324:	5f 93       	push	r21
 326:	6f 93       	push	r22
 328:	7f 93       	push	r23
 32a:	8f 93       	push	r24
 32c:	9f 93       	push	r25
 32e:	af 93       	push	r26
 330:	bf 93       	push	r27
 332:	ef 93       	push	r30
 334:	ff 93       	push	r31
 336:	cf 93       	push	r28
 338:	df 93       	push	r29
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	2a 97       	sbiw	r28, 0x0a	; 10
 340:	de bf       	out	0x3e, r29	; 62
 342:	cd bf       	out	0x3d, r28	; 61
   static unsigned char code_now = NOKEY, code_ante;
   static unsigned char loop_cnt=0;
   static int lumi=50;  //luminozitatea
   char buf_lumi[10];

   if(loop_cnt==4){
 344:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <loop_cnt.1908>
 348:	84 30       	cpi	r24, 0x04	; 4
 34a:	a9 f4       	brne	.+42     	; 0x376 <__vector_9+0x62>
      loop_cnt=0;
 34c:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <loop_cnt.1908>
      code_ante = code_now;
 350:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <code_now.1906>
 354:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <code_ante.1907>
      code_now = kbscan();
 358:	0e 94 3a 01 	call	0x274	; 0x274 <kbscan>
 35c:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <code_now.1906>
      if( code_ante == NOKEY && code_now != NOKEY){
 360:	90 91 a1 00 	lds	r25, 0x00A1	; 0x8000a1 <code_ante.1907>
 364:	9f 37       	cpi	r25, 0x7F	; 127
 366:	39 f4       	brne	.+14     	; 0x376 <__vector_9+0x62>
 368:	8f 37       	cpi	r24, 0x7F	; 127
 36a:	29 f0       	breq	.+10     	; 0x376 <__vector_9+0x62>
         kbhit=1;
 36c:	91 e0       	ldi	r25, 0x01	; 1
 36e:	90 93 a3 00 	sts	0x00A3, r25	; 0x8000a3 <kbhit>
         kbcode=code_now;
 372:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <kbcode>
      }
   }
   if(kbhit  && (kbcode == 'C' || kbcode == 'D')){
 376:	80 91 a3 00 	lds	r24, 0x00A3	; 0x8000a3 <kbhit>
 37a:	88 23       	and	r24, r24
 37c:	09 f4       	brne	.+2      	; 0x380 <__vector_9+0x6c>
 37e:	5e c0       	rjmp	.+188    	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
 380:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <kbcode>
 384:	83 34       	cpi	r24, 0x43	; 67
 386:	29 f0       	breq	.+10     	; 0x392 <__vector_9+0x7e>
 388:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <kbcode>
 38c:	84 34       	cpi	r24, 0x44	; 68
 38e:	09 f0       	breq	.+2      	; 0x392 <__vector_9+0x7e>
 390:	55 c0       	rjmp	.+170    	; 0x43c <__DATA_REGION_LENGTH__+0x3c>
      kbhit=0;
 392:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <kbhit>
      if(kbcode == 'C'){
 396:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <kbcode>
 39a:	83 34       	cpi	r24, 0x43	; 67
 39c:	91 f4       	brne	.+36     	; 0x3c2 <__vector_9+0xae>
         
         lumi=lumi+5;//...creste luminozitatea cu 5%
 39e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lumi.1909>
 3a2:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <lumi.1909+0x1>
 3a6:	05 96       	adiw	r24, 0x05	; 5
 3a8:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <lumi.1909+0x1>
 3ac:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lumi.1909>
         if(lumi>100){
 3b0:	85 36       	cpi	r24, 0x65	; 101
 3b2:	91 05       	cpc	r25, r1
 3b4:	34 f0       	brlt	.+12     	; 0x3c2 <__vector_9+0xae>
            lumi=100;
 3b6:	84 e6       	ldi	r24, 0x64	; 100
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <lumi.1909+0x1>
 3be:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lumi.1909>
         }
      }
      if(kbcode == 'D'){
 3c2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <kbcode>
 3c6:	84 34       	cpi	r24, 0x44	; 68
 3c8:	79 f4       	brne	.+30     	; 0x3e8 <__vector_9+0xd4>
         lumi=lumi-5;//...scade luminozitatea cu 5%
 3ca:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lumi.1909>
 3ce:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <lumi.1909+0x1>
 3d2:	05 97       	sbiw	r24, 0x05	; 5
 3d4:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <lumi.1909+0x1>
 3d8:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <lumi.1909>
         if(lumi<0){
 3dc:	99 23       	and	r25, r25
 3de:	24 f4       	brge	.+8      	; 0x3e8 <__vector_9+0xd4>
            lumi=0;
 3e0:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <lumi.1909+0x1>
 3e4:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <lumi.1909>
         }
      }
      
      OCR0 = (lumi * 255) / 100 - 1;
 3e8:	20 91 61 00 	lds	r18, 0x0061	; 0x800061 <lumi.1909>
 3ec:	30 91 62 00 	lds	r19, 0x0062	; 0x800062 <lumi.1909+0x1>
 3f0:	4f ef       	ldi	r20, 0xFF	; 255
 3f2:	42 9f       	mul	r20, r18
 3f4:	c0 01       	movw	r24, r0
 3f6:	43 9f       	mul	r20, r19
 3f8:	90 0d       	add	r25, r0
 3fa:	11 24       	eor	r1, r1
 3fc:	64 e6       	ldi	r22, 0x64	; 100
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 3c 02 	call	0x478	; 0x478 <__divmodhi4>
 404:	61 50       	subi	r22, 0x01	; 1
 406:	6c bf       	out	0x3c, r22	; 60
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 408:	4a e0       	ldi	r20, 0x0A	; 10
 40a:	be 01       	movw	r22, r28
 40c:	6f 5f       	subi	r22, 0xFF	; 255
 40e:	7f 4f       	sbci	r23, 0xFF	; 255
 410:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <lumi.1909>
 414:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <lumi.1909+0x1>
 418:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__itoa_ncheck>
      itoa(lumi,buf_lumi,10);
      gotoLC(2,1);
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	82 e0       	ldi	r24, 0x02	; 2
 420:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <gotoLC>
      putsLCD("L=");
 424:	88 e9       	ldi	r24, 0x98	; 152
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
      putsLCD(buf_lumi);
 42c:	ce 01       	movw	r24, r28
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
      putsLCD("%  " );
 434:	8b e9       	ldi	r24, 0x9B	; 155
 436:	90 e0       	ldi	r25, 0x00	; 0
 438:	0e 94 ef 00 	call	0x1de	; 0x1de <putsLCD>
   }
   loop_cnt++;
 43c:	80 91 a2 00 	lds	r24, 0x00A2	; 0x8000a2 <loop_cnt.1908>
 440:	8f 5f       	subi	r24, 0xFF	; 255
 442:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <loop_cnt.1908>
}//end ISR
 446:	2a 96       	adiw	r28, 0x0a	; 10
 448:	0f b6       	in	r0, 0x3f	; 63
 44a:	f8 94       	cli
 44c:	de bf       	out	0x3e, r29	; 62
 44e:	0f be       	out	0x3f, r0	; 63
 450:	cd bf       	out	0x3d, r28	; 61
 452:	df 91       	pop	r29
 454:	cf 91       	pop	r28
 456:	ff 91       	pop	r31
 458:	ef 91       	pop	r30
 45a:	bf 91       	pop	r27
 45c:	af 91       	pop	r26
 45e:	9f 91       	pop	r25
 460:	8f 91       	pop	r24
 462:	7f 91       	pop	r23
 464:	6f 91       	pop	r22
 466:	5f 91       	pop	r21
 468:	4f 91       	pop	r20
 46a:	3f 91       	pop	r19
 46c:	2f 91       	pop	r18
 46e:	0f 90       	pop	r0
 470:	0f be       	out	0x3f, r0	; 63
 472:	0f 90       	pop	r0
 474:	1f 90       	pop	r1
 476:	18 95       	reti

00000478 <__divmodhi4>:
 478:	97 fb       	bst	r25, 7
 47a:	07 2e       	mov	r0, r23
 47c:	16 f4       	brtc	.+4      	; 0x482 <__divmodhi4+0xa>
 47e:	00 94       	com	r0
 480:	07 d0       	rcall	.+14     	; 0x490 <__divmodhi4_neg1>
 482:	77 fd       	sbrc	r23, 7
 484:	09 d0       	rcall	.+18     	; 0x498 <__divmodhi4_neg2>
 486:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__udivmodhi4>
 48a:	07 fc       	sbrc	r0, 7
 48c:	05 d0       	rcall	.+10     	; 0x498 <__divmodhi4_neg2>
 48e:	3e f4       	brtc	.+14     	; 0x49e <__divmodhi4_exit>

00000490 <__divmodhi4_neg1>:
 490:	90 95       	com	r25
 492:	81 95       	neg	r24
 494:	9f 4f       	sbci	r25, 0xFF	; 255
 496:	08 95       	ret

00000498 <__divmodhi4_neg2>:
 498:	70 95       	com	r23
 49a:	61 95       	neg	r22
 49c:	7f 4f       	sbci	r23, 0xFF	; 255

0000049e <__divmodhi4_exit>:
 49e:	08 95       	ret

000004a0 <__udivmodhi4>:
 4a0:	aa 1b       	sub	r26, r26
 4a2:	bb 1b       	sub	r27, r27
 4a4:	51 e1       	ldi	r21, 0x11	; 17
 4a6:	07 c0       	rjmp	.+14     	; 0x4b6 <__udivmodhi4_ep>

000004a8 <__udivmodhi4_loop>:
 4a8:	aa 1f       	adc	r26, r26
 4aa:	bb 1f       	adc	r27, r27
 4ac:	a6 17       	cp	r26, r22
 4ae:	b7 07       	cpc	r27, r23
 4b0:	10 f0       	brcs	.+4      	; 0x4b6 <__udivmodhi4_ep>
 4b2:	a6 1b       	sub	r26, r22
 4b4:	b7 0b       	sbc	r27, r23

000004b6 <__udivmodhi4_ep>:
 4b6:	88 1f       	adc	r24, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	5a 95       	dec	r21
 4bc:	a9 f7       	brne	.-22     	; 0x4a8 <__udivmodhi4_loop>
 4be:	80 95       	com	r24
 4c0:	90 95       	com	r25
 4c2:	bc 01       	movw	r22, r24
 4c4:	cd 01       	movw	r24, r26
 4c6:	08 95       	ret

000004c8 <__itoa_ncheck>:
 4c8:	bb 27       	eor	r27, r27
 4ca:	4a 30       	cpi	r20, 0x0A	; 10
 4cc:	31 f4       	brne	.+12     	; 0x4da <__itoa_ncheck+0x12>
 4ce:	99 23       	and	r25, r25
 4d0:	22 f4       	brpl	.+8      	; 0x4da <__itoa_ncheck+0x12>
 4d2:	bd e2       	ldi	r27, 0x2D	; 45
 4d4:	90 95       	com	r25
 4d6:	81 95       	neg	r24
 4d8:	9f 4f       	sbci	r25, 0xFF	; 255
 4da:	0c 94 70 02 	jmp	0x4e0	; 0x4e0 <__utoa_common>

000004de <__utoa_ncheck>:
 4de:	bb 27       	eor	r27, r27

000004e0 <__utoa_common>:
 4e0:	fb 01       	movw	r30, r22
 4e2:	55 27       	eor	r21, r21
 4e4:	aa 27       	eor	r26, r26
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	aa 1f       	adc	r26, r26
 4ec:	a4 17       	cp	r26, r20
 4ee:	10 f0       	brcs	.+4      	; 0x4f4 <__utoa_common+0x14>
 4f0:	a4 1b       	sub	r26, r20
 4f2:	83 95       	inc	r24
 4f4:	50 51       	subi	r21, 0x10	; 16
 4f6:	b9 f7       	brne	.-18     	; 0x4e6 <__utoa_common+0x6>
 4f8:	a0 5d       	subi	r26, 0xD0	; 208
 4fa:	aa 33       	cpi	r26, 0x3A	; 58
 4fc:	08 f0       	brcs	.+2      	; 0x500 <__utoa_common+0x20>
 4fe:	a9 5d       	subi	r26, 0xD9	; 217
 500:	a1 93       	st	Z+, r26
 502:	00 97       	sbiw	r24, 0x00	; 0
 504:	79 f7       	brne	.-34     	; 0x4e4 <__utoa_common+0x4>
 506:	b1 11       	cpse	r27, r1
 508:	b1 93       	st	Z+, r27
 50a:	11 92       	st	Z+, r1
 50c:	cb 01       	movw	r24, r22
 50e:	0c 94 89 02 	jmp	0x512	; 0x512 <strrev>

00000512 <strrev>:
 512:	dc 01       	movw	r26, r24
 514:	fc 01       	movw	r30, r24
 516:	67 2f       	mov	r22, r23
 518:	71 91       	ld	r23, Z+
 51a:	77 23       	and	r23, r23
 51c:	e1 f7       	brne	.-8      	; 0x516 <strrev+0x4>
 51e:	32 97       	sbiw	r30, 0x02	; 2
 520:	04 c0       	rjmp	.+8      	; 0x52a <strrev+0x18>
 522:	7c 91       	ld	r23, X
 524:	6d 93       	st	X+, r22
 526:	70 83       	st	Z, r23
 528:	62 91       	ld	r22, -Z
 52a:	ae 17       	cp	r26, r30
 52c:	bf 07       	cpc	r27, r31
 52e:	c8 f3       	brcs	.-14     	; 0x522 <strrev+0x10>
 530:	08 95       	ret

00000532 <_exit>:
 532:	f8 94       	cli

00000534 <__stop_program>:
 534:	ff cf       	rjmp	.-2      	; 0x534 <__stop_program>
